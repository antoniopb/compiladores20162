/**
 * generated by Xtext 2.11.0
 */
package org.xtext.ufcg.compiladores.pascal.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.ufcg.compiladores.pascal.PascalPackage;
import org.xtext.ufcg.compiladores.pascal.case_label_list;
import org.xtext.ufcg.compiladores.pascal.case_limb;
import org.xtext.ufcg.compiladores.pascal.statement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>case limb</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.ufcg.compiladores.pascal.impl.case_limbImpl#getCase_list <em>Case list</em>}</li>
 *   <li>{@link org.xtext.ufcg.compiladores.pascal.impl.case_limbImpl#getStmt <em>Stmt</em>}</li>
 * </ul>
 *
 * @generated
 */
public class case_limbImpl extends MinimalEObjectImpl.Container implements case_limb
{
  /**
   * The cached value of the '{@link #getCase_list() <em>Case list</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCase_list()
   * @generated
   * @ordered
   */
  protected case_label_list case_list;

  /**
   * The cached value of the '{@link #getStmt() <em>Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStmt()
   * @generated
   * @ordered
   */
  protected statement stmt;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected case_limbImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.CASE_LIMB;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public case_label_list getCase_list()
  {
    return case_list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCase_list(case_label_list newCase_list, NotificationChain msgs)
  {
    case_label_list oldCase_list = case_list;
    case_list = newCase_list;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.CASE_LIMB__CASE_LIST, oldCase_list, newCase_list);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCase_list(case_label_list newCase_list)
  {
    if (newCase_list != case_list)
    {
      NotificationChain msgs = null;
      if (case_list != null)
        msgs = ((InternalEObject)case_list).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.CASE_LIMB__CASE_LIST, null, msgs);
      if (newCase_list != null)
        msgs = ((InternalEObject)newCase_list).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.CASE_LIMB__CASE_LIST, null, msgs);
      msgs = basicSetCase_list(newCase_list, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.CASE_LIMB__CASE_LIST, newCase_list, newCase_list));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public statement getStmt()
  {
    return stmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStmt(statement newStmt, NotificationChain msgs)
  {
    statement oldStmt = stmt;
    stmt = newStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.CASE_LIMB__STMT, oldStmt, newStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStmt(statement newStmt)
  {
    if (newStmt != stmt)
    {
      NotificationChain msgs = null;
      if (stmt != null)
        msgs = ((InternalEObject)stmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.CASE_LIMB__STMT, null, msgs);
      if (newStmt != null)
        msgs = ((InternalEObject)newStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.CASE_LIMB__STMT, null, msgs);
      msgs = basicSetStmt(newStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.CASE_LIMB__STMT, newStmt, newStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.CASE_LIMB__CASE_LIST:
        return basicSetCase_list(null, msgs);
      case PascalPackage.CASE_LIMB__STMT:
        return basicSetStmt(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.CASE_LIMB__CASE_LIST:
        return getCase_list();
      case PascalPackage.CASE_LIMB__STMT:
        return getStmt();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.CASE_LIMB__CASE_LIST:
        setCase_list((case_label_list)newValue);
        return;
      case PascalPackage.CASE_LIMB__STMT:
        setStmt((statement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.CASE_LIMB__CASE_LIST:
        setCase_list((case_label_list)null);
        return;
      case PascalPackage.CASE_LIMB__STMT:
        setStmt((statement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.CASE_LIMB__CASE_LIST:
        return case_list != null;
      case PascalPackage.CASE_LIMB__STMT:
        return stmt != null;
    }
    return super.eIsSet(featureID);
  }

} //case_limbImpl
