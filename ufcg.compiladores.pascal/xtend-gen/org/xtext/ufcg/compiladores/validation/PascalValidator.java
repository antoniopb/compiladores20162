/**
 * generated by Xtext 2.11.0.RC2
 */
package org.xtext.ufcg.compiladores.validation;

import com.google.common.base.Objects;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.xtext.ufcg.compiladores.pascal.PascalPackage;
import org.xtext.ufcg.compiladores.pascal.abstraction_declaration;
import org.xtext.ufcg.compiladores.pascal.abstraction_heading;
import org.xtext.ufcg.compiladores.pascal.any_number;
import org.xtext.ufcg.compiladores.pascal.array_type;
import org.xtext.ufcg.compiladores.pascal.assignment_statement;
import org.xtext.ufcg.compiladores.pascal.block;
import org.xtext.ufcg.compiladores.pascal.conditional_statement;
import org.xtext.ufcg.compiladores.pascal.conformant_array_schema;
import org.xtext.ufcg.compiladores.pascal.constant;
import org.xtext.ufcg.compiladores.pascal.constant_definition;
import org.xtext.ufcg.compiladores.pascal.constant_definition_part;
import org.xtext.ufcg.compiladores.pascal.expression;
import org.xtext.ufcg.compiladores.pascal.expression_list;
import org.xtext.ufcg.compiladores.pascal.factor;
import org.xtext.ufcg.compiladores.pascal.file_type;
import org.xtext.ufcg.compiladores.pascal.formal_parameter_list;
import org.xtext.ufcg.compiladores.pascal.formal_parameter_section;
import org.xtext.ufcg.compiladores.pascal.function_designator;
import org.xtext.ufcg.compiladores.pascal.if_statement;
import org.xtext.ufcg.compiladores.pascal.number;
import org.xtext.ufcg.compiladores.pascal.packed_conformant_array_schema;
import org.xtext.ufcg.compiladores.pascal.parameter_type;
import org.xtext.ufcg.compiladores.pascal.pointer_type;
import org.xtext.ufcg.compiladores.pascal.procedure_and_function_declaration_part;
import org.xtext.ufcg.compiladores.pascal.program;
import org.xtext.ufcg.compiladores.pascal.set;
import org.xtext.ufcg.compiladores.pascal.set_type;
import org.xtext.ufcg.compiladores.pascal.simple_expression;
import org.xtext.ufcg.compiladores.pascal.simple_statement;
import org.xtext.ufcg.compiladores.pascal.simple_type;
import org.xtext.ufcg.compiladores.pascal.statement;
import org.xtext.ufcg.compiladores.pascal.statement_sequence;
import org.xtext.ufcg.compiladores.pascal.structured_statement;
import org.xtext.ufcg.compiladores.pascal.structured_type;
import org.xtext.ufcg.compiladores.pascal.term;
import org.xtext.ufcg.compiladores.pascal.type;
import org.xtext.ufcg.compiladores.pascal.type_definition;
import org.xtext.ufcg.compiladores.pascal.type_definition_part;
import org.xtext.ufcg.compiladores.pascal.unpacked_conformant_array_schema;
import org.xtext.ufcg.compiladores.pascal.unpacked_structured_type;
import org.xtext.ufcg.compiladores.pascal.value_parameter_section;
import org.xtext.ufcg.compiladores.pascal.variable;
import org.xtext.ufcg.compiladores.pascal.variable_declaration_part;
import org.xtext.ufcg.compiladores.pascal.variable_parameter_section;
import org.xtext.ufcg.compiladores.pascal.variable_section;
import org.xtext.ufcg.compiladores.validation.APIProvider;
import org.xtext.ufcg.compiladores.validation.AbstractPascalValidator;
import org.xtext.ufcg.compiladores.validation.AdaptativeHashMap;
import org.xtext.ufcg.compiladores.validation.AdaptativeTreeSet;
import org.xtext.ufcg.compiladores.validation.ComposedType;
import org.xtext.ufcg.compiladores.validation.ComposedTypeKind;
import org.xtext.ufcg.compiladores.validation.Element;
import org.xtext.ufcg.compiladores.validation.ElementType;
import org.xtext.ufcg.compiladores.validation.ErrorType;
import org.xtext.ufcg.compiladores.validation.Function;
import org.xtext.ufcg.compiladores.validation.Procedure;
import org.xtext.ufcg.compiladores.validation.Type;
import org.xtext.ufcg.compiladores.validation.TypeInferer;
import org.xtext.ufcg.compiladores.validation.Variable;

@SuppressWarnings("all")
public class PascalValidator extends AbstractPascalValidator {
  private final String NIL = "nil";
  
  private final String RECORD = "record";
  
  private final String CHAR = "char";
  
  private final String BOOLEAN = "boolean";
  
  private final String INTEGER = "integer";
  
  private final String REAL = "real";
  
  private final String POINTER = "^";
  
  private final String ARRAY = "array of ";
  
  private final String UNDEFINED_TYPE_MESSAGE = "Tipo indefino";
  
  private final String CANNOT_CONVERT_MESSAGE = "Não é possivel converter ";
  
  private final String BOOL_ONLY = "Somente tipos booleanos são aceitos em condicionais.";
  
  private final String VAR_NOT_DECL = "Variavel não foi declarada.";
  
  private final String CONST_NOT_DECL = "Constante não pode ser redeclarada.";
  
  private final String CONST_ONLY = "Só são aceita constantes.";
  
  private final String NUM_ONLY = "Somente tipos numericos são aceitos.";
  
  private final String NAN = "A variavel não é um numerica.";
  
  private final String TO_BOOL = " para o tipo booleano.";
  
  private final String TO_NUM = " para um numerico.";
  
  private final String INVALID_OP = "Operador invalido para o tipo booleano.";
  
  private final String VAR_NOT_INIT = "Variavel não foi inicializada.";
  
  private final String RECEIVED = " foram recebidos ";
  
  private final String CANNOT_REDECLARE = " não pode ser redeclarada.";
  
  private final String FUNC_NOT_DECL = "Função não foi declarada.";
  
  private final String ID_FUNC_RETURN = "Identificador reservado para retorno de função.";
  
  private final String ID_IN_USE = "Identificador já está sendo usado por ";
  
  private final String CONST_CNOT_ASSIGN = "Constants cannot be assigned.";
  
  private final String ARG_WRONG_NUM = "Número incorreto de argumentos, esperava-se ";
  
  private final String ARGS = " argumentos.";
  
  private final String INCOMPATIBLE_TYPES = "Tipos de argumentos incompativeis, esperava-se ";
  
  private final String FUNC_ONLY = "Chamadas de Procedures não são permitidas em expressões.";
  
  private final String TO_MESSAGE = " para ";
  
  public final static Map<String, Map<String, Object>> tabela_de_simbolos = new HashMap<String, Map<String, Object>>();
  
  private final Map<block, Set<Variable>> variaveis = new AdaptativeHashMap<block, Variable>();
  
  private final Map<block, Set<Procedure>> procedures = new AdaptativeHashMap<block, Procedure>(APIProvider.procedures);
  
  private final Map<EObject, Set<org.xtext.ufcg.compiladores.validation.Error>> listaDeErrors = new AdaptativeHashMap<EObject, org.xtext.ufcg.compiladores.validation.Error>();
  
  private final Map<block, Set<Type>> tipos = new AdaptativeHashMap<block, Type>(APIProvider.types);
  
  private final Map<EObject, Type> comparacoes = new HashMap<EObject, Type>();
  
  @Check
  public Object preencherTabela(final program prog) {
    Object _xblockexpression = null;
    {
      String name = prog.getHeading().getName();
      Object _xifexpression = null;
      boolean _containsKey = PascalValidator.tabela_de_simbolos.containsKey(name);
      boolean _not = (!_containsKey);
      if (_not) {
        Object _xblockexpression_1 = null;
        {
          HashMap<String, Object> _hashMap = new HashMap<String, Object>();
          PascalValidator.tabela_de_simbolos.put(name, _hashMap);
          PascalValidator.tabela_de_simbolos.get(name).put("variables", this.variaveis);
          PascalValidator.tabela_de_simbolos.get(name).put("abstractions", this.procedures);
          PascalValidator.tabela_de_simbolos.get(name).put("types", this.tipos);
          _xblockexpression_1 = PascalValidator.tabela_de_simbolos.get(name).put("calculatedTypes", this.comparacoes);
        }
        _xifexpression = _xblockexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  @Check
  public void iniciarChecks(final block b) {
    this.checkTypeRedeclaration(b);
    this.checkAbstractionRedeclaration(b);
    this.checkConstantRedeclaration(b);
    this.checkVariableRedeclaration(b);
    this.checkBlock(b);
  }
  
  public static <T extends Element> T search(final Set<T> elements, final T key) {
    for (final T elemento : elements) {
      boolean _equals = elemento.equals(key);
      if (_equals) {
        return elemento;
      }
    }
    return null;
  }
  
  public static Procedure searchWithTypeCoersion(final Set<Procedure> elements, final Procedure key) {
    Procedure optimal = null;
    for (final Procedure procedimento : elements) {
      {
        boolean _equals = procedimento.equals(key);
        if (_equals) {
          return procedimento;
        }
        boolean _equalsWithTypeCoersion = procedimento.equalsWithTypeCoersion(key);
        if (_equalsWithTypeCoersion) {
          optimal = procedimento;
        }
      }
    }
    return optimal;
  }
  
  public static Type searchByName(final Set<Type> types, final Type key) {
    for (final Type tipo : types) {
      boolean _equals = tipo.name.toLowerCase().equals(key.name.toLowerCase());
      if (_equals) {
        return tipo;
      }
    }
    return null;
  }
  
  public <T extends Element> Set<T> clear(final block b, final ElementType type, final Map<block, Set<T>> container) {
    Set<T> _xblockexpression = null;
    {
      AdaptativeTreeSet<T> newSet = new AdaptativeTreeSet<T>();
      Set<T> _get = container.get(b);
      for (final T element : _get) {
        if (((!Objects.equal(element.type, type)) || element.isInherited())) {
          newSet.add(element);
        }
      }
      _xblockexpression = container.put(b, newSet);
    }
    return _xblockexpression;
  }
  
  public ArrayList<Variable> getParameters(final block b, final function_designator f) {
    ArrayList<Variable> parameters = new ArrayList<Variable>();
    expression_list _expressions = f.getExpressions();
    boolean _notEquals = (!Objects.equal(_expressions, null));
    if (_notEquals) {
      int count = 0;
      EList<expression> _expressions_1 = f.getExpressions().getExpressions();
      for (final expression expr : _expressions_1) {
        {
          Type _type = this.getType(b, expr);
          Variable _variable = new Variable(("arg_" + Integer.valueOf(count)), _type, false, b, ElementType.PARAMETER);
          parameters.add(_variable);
          count++;
        }
      }
    }
    return parameters;
  }
  
  public Procedure getAbstraction(final block b, final function_designator f) {
    String name = f.getName();
    ArrayList<Variable> parameters = this.getParameters(b, f);
    return new Procedure(name, parameters);
  }
  
  public String getRealType(final block b, final String type) {
    Set<Type> _get = this.tipos.get(b);
    Type _type = new Type(type);
    Type foundType = PascalValidator.<Type>search(_get, _type);
    boolean _notEquals = (!Objects.equal(foundType, null));
    if (_notEquals) {
      return foundType.getRealType();
    }
    return type;
  }
  
  public Type getType(final block b, final String type) {
    boolean _equals = Objects.equal(type, null);
    if (_equals) {
      return null;
    }
    if (((type.length() > 1) && type.substring(0, 1).equals(this.POINTER))) {
      Type _type = this.getType(b, type.substring(1));
      return new ComposedType(_type, ComposedTypeKind.POINTER);
    } else {
      if (((type.length() > 9) && type.substring(0, 9).equals(this.ARRAY))) {
        Type _type_1 = this.getType(b, type.substring(9));
        return new ComposedType(_type_1, ComposedTypeKind.ARRAY);
      }
    }
    String _realType = this.getRealType(b, type);
    return new Type(type, false, _realType);
  }
  
  public Type getComposedType(final block b, final String type, final ComposedTypeKind kind) {
    Type _type = this.getType(b, type);
    return new ComposedType(_type, kind);
  }
  
  public Type getType(final block bloco, final constant constante) {
    Type returnType = new Type(this.NIL);
    String _name = constante.getName();
    boolean _notEquals = (!Objects.equal(_name, null));
    if (_notEquals) {
      Set<Variable> _get = this.variaveis.get(bloco);
      String _name_1 = constante.getName();
      Variable _variable = new Variable(_name_1);
      Variable varFound = PascalValidator.<Variable>search(_get, _variable);
      boolean _notEquals_1 = (!Objects.equal(varFound, null));
      if (_notEquals_1) {
        returnType = varFound.getVarType();
      }
    } else {
      String _string = constante.getString();
      boolean _notEquals_2 = (!Objects.equal(_string, null));
      if (_notEquals_2) {
        Type _type = new Type(this.CHAR);
        ComposedType _composedType = new ComposedType(_type, ComposedTypeKind.ARRAY);
        returnType = _composedType;
      } else {
        String _boolLiteral = constante.getBoolLiteral();
        boolean _notEquals_3 = (!Objects.equal(_boolLiteral, null));
        if (_notEquals_3) {
          Type _type_1 = new Type(this.BOOLEAN);
          returnType = _type_1;
        } else {
          String _nil = constante.getNil();
          boolean _notEquals_4 = (!Objects.equal(_nil, null));
          if (_notEquals_4) {
            Type _type_2 = new Type(this.NIL);
            returnType = _type_2;
          } else {
            number _number = constante.getNumber();
            boolean _notEquals_5 = (!Objects.equal(_number, null));
            if (_notEquals_5) {
              String _integer = constante.getNumber().getNumber().getInteger();
              boolean _notEquals_6 = (!Objects.equal(_integer, null));
              if (_notEquals_6) {
                Type _type_3 = new Type(this.INTEGER);
                returnType = _type_3;
              } else {
                String _real = constante.getNumber().getNumber().getReal();
                boolean _notEquals_7 = (!Objects.equal(_real, null));
                if (_notEquals_7) {
                  Type _type_4 = new Type(this.REAL);
                  returnType = _type_4;
                }
              }
            }
          }
        }
      }
    }
    return returnType;
  }
  
  public Type getType(final block b, final parameter_type type) {
    Type returnType = new Type(this.NIL);
    conformant_array_schema _array = type.getArray();
    boolean _notEquals = (!Objects.equal(_array, null));
    if (_notEquals) {
      conformant_array_schema array = type.getArray();
      packed_conformant_array_schema _packed = array.getPacked();
      boolean _notEquals_1 = (!Objects.equal(_packed, null));
      if (_notEquals_1) {
        Type _type = this.getType(b, array.getPacked().getName());
        ComposedType _composedType = new ComposedType(_type, ComposedTypeKind.ARRAY);
        returnType = _composedType;
      } else {
        unpacked_conformant_array_schema _unpacked = array.getUnpacked();
        boolean _notEquals_2 = (!Objects.equal(_unpacked, null));
        if (_notEquals_2) {
          Type _type_1 = this.getType(b, array.getUnpacked().getType());
          ComposedType _composedType_1 = new ComposedType(_type_1, ComposedTypeKind.ARRAY);
          returnType = _composedType_1;
        }
      }
    } else {
      String _name = type.getName();
      boolean _notEquals_3 = (!Objects.equal(_name, null));
      if (_notEquals_3) {
        Set<Type> _get = this.tipos.get(b);
        String _name_1 = type.getName();
        Type _type_2 = new Type(_name_1);
        Type _search = PascalValidator.<Type>search(_get, _type_2);
        boolean _equals = Objects.equal(_search, null);
        if (_equals) {
          this.insertError(type, this.UNDEFINED_TYPE_MESSAGE, ErrorType.UNDEFINED_TYPE, PascalPackage.Literals.PARAMETER_TYPE__NAME);
        } else {
          this.removeError(type, ErrorType.UNDEFINED_TYPE);
        }
        returnType = this.getType(b, type.getName());
      }
    }
    return returnType;
  }
  
  public Type getType(final block b, final type type) {
    Type returnType = new Type(this.NIL);
    simple_type _simple = type.getSimple();
    boolean _notEquals = (!Objects.equal(_simple, null));
    if (_notEquals) {
      simple_type simple = type.getSimple();
      if (((!Objects.equal(simple.getSubrange(), null)) || (!Objects.equal(simple.getEnumerated(), null)))) {
        Type _type = new Type("enumerated", false, "...enumerated");
        returnType = _type;
      } else {
        String _name = simple.getName();
        boolean _notEquals_1 = (!Objects.equal(_name, null));
        if (_notEquals_1) {
          Set<Type> _get = this.tipos.get(b);
          String _name_1 = simple.getName();
          Type _type_1 = new Type(_name_1);
          Type _search = PascalValidator.<Type>search(_get, _type_1);
          boolean _equals = Objects.equal(_search, null);
          if (_equals) {
            this.insertError(type, this.UNDEFINED_TYPE_MESSAGE, ErrorType.UNDEFINED_TYPE, PascalPackage.Literals.TYPE__SIMPLE);
          } else {
            this.removeError(type, ErrorType.UNDEFINED_TYPE);
          }
          returnType = this.getType(b, simple.getName());
        }
      }
    } else {
      structured_type _structured = type.getStructured();
      boolean _notEquals_2 = (!Objects.equal(_structured, null));
      if (_notEquals_2) {
        structured_type structured = type.getStructured();
        unpacked_structured_type unpacked = structured.getType();
        array_type _array = unpacked.getArray();
        boolean _notEquals_3 = (!Objects.equal(_array, null));
        if (_notEquals_3) {
          Type _type_2 = this.getType(b, unpacked.getArray().getType());
          ComposedType _composedType = new ComposedType(_type_2, ComposedTypeKind.ARRAY);
          returnType = _composedType;
        } else {
          set_type _set = unpacked.getSet();
          boolean _notEquals_4 = (!Objects.equal(_set, null));
          if (_notEquals_4) {
            returnType = this.getType(b, unpacked.getSet().getType());
          } else {
            file_type _file = unpacked.getFile();
            boolean _notEquals_5 = (!Objects.equal(_file, null));
            if (_notEquals_5) {
              returnType = this.getType(b, unpacked.getFile().getType());
            }
          }
        }
      } else {
        pointer_type _pointer = type.getPointer();
        boolean _notEquals_6 = (!Objects.equal(_pointer, null));
        if (_notEquals_6) {
          Type _type_3 = this.getType(b, type.getPointer().getType());
          ComposedType _composedType_1 = new ComposedType(_type_3, ComposedTypeKind.POINTER);
          returnType = _composedType_1;
        }
      }
    }
    return returnType;
  }
  
  public Type getType(final block bloco, final variable variavel) {
    Type returnType = new Type(this.NIL);
    Set<Variable> _get = this.variaveis.get(bloco);
    String _name = variavel.getName();
    Variable _variable = new Variable(_name);
    Variable variableFound = PascalValidator.<Variable>search(_get, _variable);
    boolean _notEquals = (!Objects.equal(variableFound, null));
    if (_notEquals) {
      returnType = variableFound.getVarType();
    }
    return returnType;
  }
  
  public Type getType(final block bloco, final factor fator) {
    Type returnType = new Type(this.NIL);
    variable _variable = fator.getVariable();
    boolean _notEquals = (!Objects.equal(_variable, null));
    if (_notEquals) {
      Set<Variable> _get = this.variaveis.get(bloco);
      String _name = fator.getVariable().getName();
      Variable _variable_1 = new Variable(_name);
      Variable variableFound = PascalValidator.<Variable>search(_get, _variable_1);
      boolean _notEquals_1 = (!Objects.equal(variableFound, null));
      if (_notEquals_1) {
        returnType = variableFound.getVarType();
      }
    } else {
      number _number = fator.getNumber();
      boolean _notEquals_2 = (!Objects.equal(_number, null));
      if (_notEquals_2) {
        any_number number = fator.getNumber().getNumber();
        String _integer = number.getInteger();
        boolean _notEquals_3 = (!Objects.equal(_integer, null));
        if (_notEquals_3) {
          Type _type = new Type(this.INTEGER);
          returnType = _type;
        } else {
          String _real = number.getReal();
          boolean _notEquals_4 = (!Objects.equal(_real, null));
          if (_notEquals_4) {
            Type _type_1 = new Type(this.REAL);
            returnType = _type_1;
          }
        }
      } else {
        String _string = fator.getString();
        boolean _notEquals_5 = (!Objects.equal(_string, null));
        if (_notEquals_5) {
          Type _type_2 = new Type(this.CHAR);
          ComposedType _composedType = new ComposedType(_type_2, ComposedTypeKind.ARRAY);
          returnType = _composedType;
        } else {
          set _set = fator.getSet();
          boolean _notEquals_6 = (!Objects.equal(_set, null));
          if (_notEquals_6) {
            returnType = this.getType(bloco, fator.getSet().getExpressions(), true);
          } else {
            boolean _isNil = fator.isNil();
            if (_isNil) {
              Type _type_3 = new Type(this.NIL);
              returnType = _type_3;
            } else {
              if (((!Objects.equal(fator.getBoolean(), null)) || (!Objects.equal(fator.getNot(), null)))) {
                Type _type_4 = new Type(this.BOOLEAN);
                returnType = _type_4;
              } else {
                function_designator _function = fator.getFunction();
                boolean _notEquals_7 = (!Objects.equal(_function, null));
                if (_notEquals_7) {
                  returnType = this.getType(bloco, fator.getFunction());
                } else {
                  expression _expression = fator.getExpression();
                  boolean _notEquals_8 = (!Objects.equal(_expression, null));
                  if (_notEquals_8) {
                    returnType = this.getType(bloco, fator.getExpression());
                  }
                }
              }
            }
          }
        }
      }
    }
    this.comparacoes.put(fator, returnType);
    return returnType;
  }
  
  public Type getType(final block bloco, final function_designator f) {
    Type returnType = new Type(this.NIL);
    Procedure function = this.getAbstraction(bloco, f);
    Procedure abstractionFound = PascalValidator.searchWithTypeCoersion(this.procedures.get(bloco), function);
    if (((!Objects.equal(abstractionFound, null)) && Objects.equal(abstractionFound.type, ElementType.FUNCTION))) {
      Function functionFound = ((Function) abstractionFound);
      returnType = functionFound.getReturnType();
    }
    return returnType;
  }
  
  public Type getType(final block bloco, final term termo) {
    Type greatestType = null;
    EList<factor> _factors = termo.getFactors();
    for (final factor f : _factors) {
      {
        Type type = this.getType(bloco, f);
        greatestType = TypeInferer.greater(type, greatestType);
      }
    }
    this.comparacoes.put(termo, greatestType);
    return greatestType;
  }
  
  public Type getType(final block bloco, final expression expressao) {
    Type returnType = new Type(this.NIL);
    if (((!Objects.equal(expressao.getOperators(), null)) && (!expressao.getOperators().isEmpty()))) {
      Type _type = new Type(this.BOOLEAN);
      returnType = _type;
    } else {
      Type greatestType = null;
      EList<simple_expression> _expressions = expressao.getExpressions();
      for (final simple_expression e : _expressions) {
        {
          Type type = this.getType(bloco, e);
          greatestType = TypeInferer.greater(type, greatestType);
        }
      }
      returnType = greatestType;
    }
    this.comparacoes.put(expressao, returnType);
    return returnType;
  }
  
  public Type getType(final block bloco, final simple_expression expressao) {
    Type greatestType = null;
    EList<EObject> _terms = expressao.getTerms();
    for (final EObject obj : _terms) {
      if ((obj instanceof term)) {
        term termo = ((term) obj);
        Type tipo = this.getType(bloco, termo);
        greatestType = TypeInferer.greater(tipo, greatestType);
      } else {
        any_number numero = ((any_number) obj);
        String _integer = numero.getInteger();
        boolean _notEquals = (!Objects.equal(_integer, null));
        if (_notEquals) {
          Type _type = new Type(this.INTEGER);
          greatestType = TypeInferer.greater(_type, greatestType);
        } else {
          Type _type_1 = new Type(this.REAL);
          greatestType = TypeInferer.greater(_type_1, greatestType);
        }
      }
    }
    this.comparacoes.put(expressao, greatestType);
    return greatestType;
  }
  
  public Type getType(final block bloco, final expression_list expressoes, final boolean coeso) {
    Type greatestType = null;
    boolean hasErrors = true;
    EList<expression> _expressions = expressoes.getExpressions();
    for (final expression expressao : _expressions) {
      {
        Type type = this.getType(bloco, expressao);
        if (coeso) {
          if (((((!Objects.equal(greatestType, null)) && (TypeInferer.getTypeWeight(greatestType) < 0)) && (TypeInferer.getTypeWeight(type) >= 0)) || 
            ((TypeInferer.getTypeWeight(type) < 0) && (TypeInferer.getTypeWeight(greatestType) >= 0)))) {
            this.insertError(expressoes, ((((this.CANNOT_CONVERT_MESSAGE + type) + this.TO_MESSAGE) + greatestType) + "."), ErrorType.TYPE_COHESION, PascalPackage.Literals.EXPRESSION_LIST__EXPRESSIONS);
            hasErrors = true;
          }
        }
        greatestType = TypeInferer.greater(type, greatestType);
      }
    }
    if ((!hasErrors)) {
      this.removeError(expressoes, ErrorType.TYPE_COHESION);
    }
    this.comparacoes.put(expressoes, greatestType);
    return greatestType;
  }
  
  public static boolean isNumeric(final Object obj) {
    try {
      Double.parseDouble(obj.toString());
    } catch (final Throwable _t) {
      if (_t instanceof Exception) {
        final Exception e = (Exception)_t;
        return false;
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
    return true;
  }
  
  public static Object getValue(final number numero) {
    String _integer = numero.getNumber().getInteger();
    boolean _notEquals = (!Objects.equal(_integer, null));
    if (_notEquals) {
      return Integer.valueOf(numero.getNumber().getInteger());
    } else {
      String _real = numero.getNumber().getReal();
      boolean _notEquals_1 = (!Objects.equal(_real, null));
      if (_notEquals_1) {
        return Double.valueOf(numero.getNumber().getReal());
      }
    }
    return null;
  }
  
  public static Object getValue(final constant constante, final Set<Variable> variables) {
    Object value = null;
    String _name = constante.getName();
    boolean _notEquals = (!Objects.equal(_name, null));
    if (_notEquals) {
      String _name_1 = constante.getName();
      Variable _variable = new Variable(_name_1);
      Variable variable = PascalValidator.<Variable>search(variables, _variable);
      value = variable.getValue();
    } else {
      number _number = constante.getNumber();
      boolean _notEquals_1 = (!Objects.equal(_number, null));
      if (_notEquals_1) {
        value = PascalValidator.getValue(constante.getNumber());
      } else {
        String _string = constante.getString();
        boolean _notEquals_2 = (!Objects.equal(_string, null));
        if (_notEquals_2) {
          value = constante.getString();
        } else {
          String _boolLiteral = constante.getBoolLiteral();
          boolean _notEquals_3 = (!Objects.equal(_boolLiteral, null));
          if (_notEquals_3) {
            value = Boolean.valueOf(constante.getBoolLiteral());
          } else {
            String _nil = constante.getNil();
            boolean _notEquals_4 = (!Objects.equal(_nil, null));
            if (_notEquals_4) {
              value = null;
            }
          }
        }
      }
    }
    String _opterator = constante.getOpterator();
    boolean _notEquals_5 = (!Objects.equal(_opterator, null));
    if (_notEquals_5) {
      if ((PascalValidator.isNumeric(value) && constante.getOpterator().equals("-"))) {
        try {
          int _parseInt = Integer.parseInt(value.toString());
          return Integer.valueOf((-_parseInt));
        } catch (final Throwable _t) {
          if (_t instanceof Exception) {
            final Exception e = (Exception)_t;
            double _parseDouble = Double.parseDouble(value.toString());
            return Double.valueOf((-_parseDouble));
          } else {
            throw Exceptions.sneakyThrow(_t);
          }
        }
      }
    }
    return value;
  }
  
  public <T extends Element> Boolean addElement(final block bloco, final T elemento, final Map<block, Set<T>> container, final EObject errorSection, final EStructuralFeature errorFeature) {
    boolean _xblockexpression = false;
    {
      T elementFound = null;
      boolean _equals = Objects.equal(container, this.tipos);
      if (_equals) {
        Type type = ((Type) elemento);
        Type _searchByName = PascalValidator.searchByName(this.tipos.get(bloco), type);
        elementFound = ((T) _searchByName);
      } else {
        elementFound = PascalValidator.<T>search(container.get(bloco), elemento);
      }
      boolean _xifexpression = false;
      if (((!Objects.equal(elementFound, null)) && (!elementFound.isInherited()))) {
        boolean _xifexpression_1 = false;
        boolean _equals_1 = Objects.equal(elemento.type, elementFound.type);
        if (_equals_1) {
          String _plus = (elemento.type + this.CANNOT_REDECLARE);
          _xifexpression_1 = this.insertError(errorSection, _plus, ErrorType.REDECLARATION, errorFeature);
        } else {
          boolean _xifexpression_2 = false;
          boolean _equals_2 = Objects.equal(elementFound.type, ElementType.FUNCTION_RETURN);
          if (_equals_2) {
            _xifexpression_2 = this.insertError(errorSection, this.ID_FUNC_RETURN, ErrorType.REDECLARATION, errorFeature);
          } else {
            String _lowerCase = elementFound.type.toString().toLowerCase();
            String _plus_1 = (this.ID_IN_USE + _lowerCase);
            String _plus_2 = (_plus_1 + ".");
            _xifexpression_2 = this.insertError(errorSection, _plus_2, ErrorType.REDECLARATION, errorFeature);
          }
          _xifexpression_1 = _xifexpression_2;
        }
        _xifexpression = _xifexpression_1;
      } else {
        this.removeError(errorSection, ErrorType.REDECLARATION);
        container.get(bloco).add(elemento);
        Element _clone = elemento.clone();
        T inheritedElement = ((T) _clone);
        inheritedElement.inherited = true;
        this.<T>inheritElement(bloco, inheritedElement, container);
      }
      _xblockexpression = _xifexpression;
    }
    return Boolean.valueOf(_xblockexpression);
  }
  
  public <T extends Element> void inheritElement(final block bloco, final T elemento, final Map<block, Set<T>> container) {
    procedure_and_function_declaration_part _abstraction = bloco.getDeclaration().getAbstraction();
    boolean _notEquals = (!Objects.equal(_abstraction, null));
    if (_notEquals) {
      EList<abstraction_heading> _procedures = bloco.getDeclaration().getAbstraction().getProcedures();
      boolean _notEquals_1 = (!Objects.equal(_procedures, null));
      if (_notEquals_1) {
        EList<abstraction_heading> _procedures_1 = bloco.getDeclaration().getAbstraction().getProcedures();
        for (final abstraction_declaration procedure : _procedures_1) {
          this.<T>addElementToAbstraction(procedure, elemento, container);
        }
      }
      EList<abstraction_declaration> _functions = bloco.getDeclaration().getAbstraction().getFunctions();
      boolean _notEquals_2 = (!Objects.equal(_functions, null));
      if (_notEquals_2) {
        EList<abstraction_declaration> _functions_1 = bloco.getDeclaration().getAbstraction().getFunctions();
        for (final abstraction_declaration function : _functions_1) {
          this.<T>addElementToAbstraction(function, elemento, container);
        }
      }
    }
  }
  
  public <T extends Element> boolean addElementToAbstraction(final abstraction_declaration decl, final T elemento, final Map<block, Set<T>> container) {
    boolean _xblockexpression = false;
    {
      block _block = decl.getBlock();
      boolean _equals = Objects.equal(_block, null);
      if (_equals) {
        decl.setBlock(PascalPackage.eINSTANCE.getPascalFactory().createblock());
      }
      block subblock = decl.getBlock();
      _xblockexpression = container.get(subblock).add(elemento);
    }
    return _xblockexpression;
  }
  
  public ArrayList<Variable> getParameters(final block b, final abstraction_heading heading, final block abstractionBlock) {
    ArrayList<Variable> parameters = new ArrayList<Variable>();
    formal_parameter_list _parameters = heading.getParameters();
    boolean _notEquals = (!Objects.equal(_parameters, null));
    if (_notEquals) {
      formal_parameter_list list = heading.getParameters();
      EList<formal_parameter_section> _parameters_1 = list.getParameters();
      boolean _notEquals_1 = (!Objects.equal(_parameters_1, null));
      if (_notEquals_1) {
        EList<formal_parameter_section> _parameters_2 = list.getParameters();
        for (final formal_parameter_section section : _parameters_2) {
          variable_parameter_section _variable = section.getVariable();
          boolean _notEquals_2 = (!Objects.equal(_variable, null));
          if (_notEquals_2) {
            variable_parameter_section variable = section.getVariable();
            EList<String> _ids = variable.getIdentifiers().getIds();
            for (final String varName : _ids) {
              {
                Type _type = this.getType(b, section.getVariable().getType());
                Variable parameter = new Variable(varName, _type, false, abstractionBlock, ElementType.PARAMETER);
                this.<Variable>addElement(b, parameter, this.variaveis, variable, PascalPackage.Literals.VARIABLE_PARAMETER_SECTION__IDENTIFIERS);
                parameters.add(parameter);
              }
            }
          } else {
            value_parameter_section _value = section.getValue();
            boolean _notEquals_3 = (!Objects.equal(_value, null));
            if (_notEquals_3) {
              value_parameter_section value = section.getValue();
              EList<String> _ids_1 = value.getIdentifiers().getIds();
              for (final String valName : _ids_1) {
                {
                  Type _type = this.getType(b, value.getType());
                  Variable parameter = new Variable(valName, _type, false, abstractionBlock, ElementType.PARAMETER);
                  this.<Variable>addElement(b, parameter, this.variaveis, value, PascalPackage.Literals.VALUE_PARAMETER_SECTION__IDENTIFIERS);
                  parameters.add(parameter);
                }
              }
            }
          }
        }
      }
    }
    return parameters;
  }
  
  public Boolean addAbstraction(final block b, final abstraction_declaration decl, final abstraction_heading heading) {
    Boolean _xblockexpression = null;
    {
      String name = heading.getName();
      block _block = decl.getBlock();
      boolean _equals = Objects.equal(_block, null);
      if (_equals) {
        decl.setBlock(PascalPackage.eINSTANCE.getPascalFactory().createblock());
      }
      this.<Variable>clear(decl.getBlock(), ElementType.PARAMETER, this.variaveis);
      ArrayList<Variable> parameters = this.getParameters(decl.getBlock(), heading, decl.getBlock());
      boolean forward = decl.isForward();
      String returnType = heading.getResultType();
      Boolean _xifexpression = null;
      boolean _notEquals = (!Objects.equal(returnType, null));
      if (_notEquals) {
        boolean _xblockexpression_1 = false;
        {
          Set<Type> _get = this.tipos.get(b);
          Type _type = new Type(returnType);
          Type _search = PascalValidator.<Type>search(_get, _type);
          boolean _equals_1 = Objects.equal(_search, null);
          if (_equals_1) {
            this.insertError(heading, this.UNDEFINED_TYPE_MESSAGE, ErrorType.UNDEFINED_TYPE, PascalPackage.Literals.ABSTRACTION_HEADING__RESULT_TYPE);
          } else {
            this.removeError(heading, ErrorType.UNDEFINED_TYPE);
          }
          Type _type_1 = this.getType(b, returnType);
          Function function = new Function(name, forward, b, decl, parameters, forward, _type_1);
          this.<Procedure>addElement(b, function, this.procedures, heading, PascalPackage.Literals.ABSTRACTION_HEADING__NAME);
          Type _type_2 = this.getType(b, returnType);
          block _block_1 = decl.getBlock();
          Variable returnVariable = new Variable(name, _type_2, false, _block_1, ElementType.FUNCTION_RETURN);
          returnVariable.setOwningFunction(function);
          _xblockexpression_1 = this.variaveis.get(decl.getBlock()).add(returnVariable);
        }
        _xifexpression = Boolean.valueOf(_xblockexpression_1);
      } else {
        Procedure _procedure = new Procedure(name, forward, b, decl, parameters, forward);
        _xifexpression = this.<Procedure>addElement(b, _procedure, this.procedures, heading, PascalPackage.Literals.ABSTRACTION_HEADING__NAME);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public void checkAbstractionRedeclaration(final block b) {
    procedure_and_function_declaration_part _abstraction = b.getDeclaration().getAbstraction();
    boolean _notEquals = (!Objects.equal(_abstraction, null));
    if (_notEquals) {
      this.<Procedure>clear(b, ElementType.FUNCTION, this.procedures);
      this.<Procedure>clear(b, ElementType.PROCEDURE, this.procedures);
      procedure_and_function_declaration_part abstraction = b.getDeclaration().getAbstraction();
      EList<abstraction_declaration> _functions = abstraction.getFunctions();
      boolean _notEquals_1 = (!Objects.equal(_functions, null));
      if (_notEquals_1) {
        EList<abstraction_declaration> _functions_1 = abstraction.getFunctions();
        for (final abstraction_declaration function : _functions_1) {
          this.addAbstraction(b, function, function.getHeading());
        }
      }
      EList<abstraction_heading> _procedures = abstraction.getProcedures();
      boolean _notEquals_2 = (!Objects.equal(_procedures, null));
      if (_notEquals_2) {
        EList<abstraction_heading> _procedures_1 = abstraction.getProcedures();
        for (final abstraction_declaration procedure : _procedures_1) {
          this.addAbstraction(b, procedure, procedure.getHeading());
        }
      }
    }
  }
  
  public void checkTypeRedeclaration(final block b) {
    this.<Type>clear(b, ElementType.TYPE, this.tipos);
    type_definition_part _type_def = b.getDeclaration().getType_def();
    boolean _notEquals = (!Objects.equal(_type_def, null));
    if (_notEquals) {
      EList<type_definition> _types = b.getDeclaration().getType_def().getTypes();
      for (final type_definition t : _types) {
        String _name = t.getName();
        String _realType = this.getType(b, t.getType()).getRealType();
        Type _type = new Type(_name, false, _realType);
        this.<Type>addElement(b, _type, this.tipos, t, PascalPackage.Literals.TYPE_DEFINITION__NAME);
      }
    }
  }
  
  public void checkConstantRedeclaration(final block b) {
    this.<Variable>clear(b, ElementType.CONSTANT, this.variaveis);
    constant_definition_part _constant_def = b.getDeclaration().getConstant_def();
    boolean _notEquals = (!Objects.equal(_constant_def, null));
    if (_notEquals) {
      EList<constant_definition> _consts = b.getDeclaration().getConstant_def().getConsts();
      for (final constant_definition const_ : _consts) {
        String _name = const_.getName();
        Type _type = this.getType(b, const_.getConst());
        Object _value = PascalValidator.getValue(const_.getConst(), this.variaveis.get(b));
        Variable _variable = new Variable(_name, _type, false, b, ElementType.CONSTANT, _value);
        this.<Variable>addElement(b, _variable, this.variaveis, const_, PascalPackage.Literals.CONSTANT_DEFINITION__NAME);
      }
    }
  }
  
  public void checkVariableRedeclaration(final block b) {
    this.<Variable>clear(b, ElementType.VARIABLE, this.variaveis);
    variable_declaration_part _variable_decl = b.getDeclaration().getVariable_decl();
    boolean _notEquals = (!Objects.equal(_variable_decl, null));
    if (_notEquals) {
      EList<variable_section> _sections = b.getDeclaration().getVariable_decl().getSections();
      for (final variable_section section : _sections) {
        EList<String> _names = section.getIdentifiers().getNames();
        for (final String name : _names) {
          {
            Type type = this.getType(b, section.getType());
            Variable _variable = new Variable(name, type, false, b, ElementType.VARIABLE);
            this.<Variable>addElement(b, _variable, this.variaveis, section, PascalPackage.Literals.VARIABLE_SECTION__IDENTIFIERS);
          }
        }
      }
    }
  }
  
  public boolean checkVariable(final block b, final variable v, final boolean isAssignment) {
    boolean isValid = true;
    boolean _equals = Objects.equal(v, null);
    if (_equals) {
      return true;
    }
    Set<Variable> _get = this.variaveis.get(b);
    String _name = v.getName();
    Variable _variable = new Variable(_name);
    Variable searchVariable = PascalValidator.<Variable>search(_get, _variable);
    boolean _equals_1 = Objects.equal(searchVariable, null);
    if (_equals_1) {
      isValid = false;
      this.insertError(v, this.VAR_NOT_DECL, ErrorType.NOT_DECLARATION, PascalPackage.Literals.VARIABLE__NAME);
    } else {
      this.removeError(v, ErrorType.NOT_DECLARATION);
      if (isAssignment) {
        boolean _equals_2 = Objects.equal(searchVariable.type, ElementType.CONSTANT);
        if (_equals_2) {
          isValid = false;
          this.insertError(v, this.CONST_CNOT_ASSIGN, ErrorType.CONSTANT_ASSIGNMENT, PascalPackage.Literals.VARIABLE__NAME);
        } else {
          this.removeError(v, ErrorType.CONSTANT_ASSIGNMENT);
        }
      }
    }
    return isValid;
  }
  
  public void checkAbstraction(final block b, final Procedure proc, final boolean functionOnly, final EObject object, final EStructuralFeature feature) {
    Procedure abstractionFound = PascalValidator.searchWithTypeCoersion(this.procedures.get(b), proc);
    boolean _equals = Objects.equal(abstractionFound, null);
    if (_equals) {
      Set<Procedure> _get = this.procedures.get(b);
      for (final Procedure p : _get) {
        boolean _equals_1 = p.name.toLowerCase().equals(proc.name.toLowerCase());
        if (_equals_1) {
          int _size = p.parameters.size();
          int _size_1 = proc.parameters.size();
          boolean _notEquals = (_size != _size_1);
          if (_notEquals) {
            int _size_2 = p.parameters.size();
            String _plus = (this.ARG_WRONG_NUM + Integer.valueOf(_size_2));
            String _plus_1 = (_plus + this.RECEIVED);
            int _size_3 = proc.parameters.size();
            String _plus_2 = (_plus_1 + Integer.valueOf(_size_3));
            String _plus_3 = (_plus_2 + this.ARGS);
            this.insertError(object, _plus_3, ErrorType.NOT_DECLARATION, feature);
          } else {
            Iterator<Variable> it1 = p.parameters.iterator();
            Iterator<Variable> it2 = proc.parameters.iterator();
            while ((it1.hasNext() && it2.hasNext())) {
              {
                Variable type1 = it1.next();
                Variable type2 = it2.next();
                boolean _areTypesCompatibles = TypeInferer.areTypesCompatibles(type1.getVarType(), type2.getVarType());
                boolean _not = (!_areTypesCompatibles);
                if (_not) {
                  this.insertError(object, ((((this.INCOMPATIBLE_TYPES + p.parameters) + this.RECEIVED) + proc.parameters) + "."), ErrorType.NOT_DECLARATION, feature);
                  return;
                }
              }
            }
          }
          return;
        }
      }
      this.insertError(object, this.FUNC_NOT_DECL, ErrorType.NOT_DECLARATION, feature);
    } else {
      this.removeError(object, ErrorType.NOT_DECLARATION);
      if ((Objects.equal(abstractionFound.type, ElementType.PROCEDURE) && functionOnly)) {
        this.insertError(object, this.FUNC_ONLY, ErrorType.FUNCTION_ONLY, feature);
      } else {
        this.removeError(object, ErrorType.FUNCTION_ONLY);
      }
    }
  }
  
  public void checkAbstractionCall(final block b, final function_designator function, final boolean functionOnly) {
    expression_list _expressions = function.getExpressions();
    boolean _notEquals = (!Objects.equal(_expressions, null));
    if (_notEquals) {
      EList<expression> _expressions_1 = function.getExpressions().getExpressions();
      for (final expression e : _expressions_1) {
        this.checkExpression(b, e);
      }
    }
    this.checkAbstraction(b, this.getAbstraction(b, function), functionOnly, function, PascalPackage.Literals.FUNCTION_DESIGNATOR__NAME);
  }
  
  public void checkFactor(final block b, final factor f) {
    variable _variable = f.getVariable();
    boolean _notEquals = (!Objects.equal(_variable, null));
    if (_notEquals) {
      this.checkVariable(b, f.getVariable(), false);
      boolean _containsKey = this.variaveis.containsKey(b);
      if (_containsKey) {
        Set<Variable> _get = this.variaveis.get(b);
        String _name = f.getVariable().getName();
        Variable _variable_1 = new Variable(_name);
        Variable v = PascalValidator.<Variable>search(_get, _variable_1);
        if (((!Objects.equal(v, null)) && Objects.equal(v.getValue(), null))) {
          this.insertError(f, this.VAR_NOT_INIT, ErrorType.NOT_INITIALIZED, PascalPackage.Literals.FACTOR__VARIABLE);
        } else {
          this.removeError(f, ErrorType.NOT_INITIALIZED);
        }
      }
    } else {
      function_designator _function = f.getFunction();
      boolean _notEquals_1 = (!Objects.equal(_function, null));
      if (_notEquals_1) {
        this.checkAbstractionCall(b, f.getFunction(), true);
      } else {
        factor _not = f.getNot();
        boolean _notEquals_2 = (!Objects.equal(_not, null));
        if (_notEquals_2) {
          boolean _equals = this.getType(b, f.getNot()).getRealType().toLowerCase().equals(this.BOOLEAN);
          boolean _not_1 = (!_equals);
          if (_not_1) {
            Type _type = this.getType(b, f.getNot());
            String _plus = (this.CANNOT_CONVERT_MESSAGE + _type);
            String _plus_1 = (_plus + this.TO_BOOL);
            this.insertError(f, _plus_1, ErrorType.TYPE_CONVERSION_ERROR, PascalPackage.Literals.FACTOR__NOT);
          } else {
            this.removeError(f, ErrorType.TYPE_CONVERSION_ERROR);
          }
          this.checkFactor(b, f.getNot());
        } else {
          expression _expression = f.getExpression();
          boolean _notEquals_3 = (!Objects.equal(_expression, null));
          if (_notEquals_3) {
            this.checkExpression(b, f.getExpression());
          }
        }
      }
    }
  }
  
  public void checkTerm(final block b, final term t) {
    boolean isBoolean = false;
    boolean isNumeric = false;
    EList<String> _operators = t.getOperators();
    boolean _notEquals = (!Objects.equal(_operators, null));
    if (_notEquals) {
      EList<String> _operators_1 = t.getOperators();
      for (final String op : _operators_1) {
        boolean _equals = op.toLowerCase().equals("and");
        if (_equals) {
          isBoolean = true;
        } else {
          if ((!isBoolean)) {
            isNumeric = true;
          } else {
            this.insertError(t, this.INVALID_OP, ErrorType.INVALID_OPERATOR, PascalPackage.Literals.TERM__OPERATORS);
            return;
          }
        }
      }
    }
    this.removeError(t, ErrorType.INVALID_OPERATOR);
    EList<factor> _factors = t.getFactors();
    for (final factor f : _factors) {
      {
        if (isBoolean) {
          boolean _equals_1 = this.getType(b, f).getRealType().toLowerCase().equals(this.BOOLEAN);
          boolean _not = (!_equals_1);
          if (_not) {
            Type _type = this.getType(b, f);
            String _plus = (this.CANNOT_CONVERT_MESSAGE + _type);
            String _plus_1 = (_plus + this.TO_BOOL);
            this.insertError(t, _plus_1, ErrorType.TYPE_CONVERSION_ERROR, PascalPackage.Literals.TERM__FACTORS);
          } else {
            this.removeError(t, ErrorType.TYPE_CONVERSION_ERROR);
          }
        } else {
          if (isNumeric) {
            int _typeWeight = TypeInferer.getTypeWeight(this.getType(b, f));
            boolean _equals_2 = (_typeWeight == (-1));
            if (_equals_2) {
              Type _type_1 = this.getType(b, f);
              String _plus_2 = (this.CANNOT_CONVERT_MESSAGE + _type_1);
              String _plus_3 = (_plus_2 + this.TO_NUM);
              this.insertError(t, _plus_3, ErrorType.TYPE_CONVERSION_ERROR, PascalPackage.Literals.TERM__FACTORS);
            } else {
              this.removeError(t, ErrorType.TYPE_CONVERSION_ERROR);
            }
          }
        }
        this.checkFactor(b, f);
      }
    }
  }
  
  public void checkExpression(final block b, final expression expr) {
    EList<simple_expression> _expressions = expr.getExpressions();
    for (final simple_expression s : _expressions) {
      {
        boolean isBoolean = false;
        boolean isNumeric = false;
        String _prefixOperator = s.getPrefixOperator();
        boolean _notEquals = (!Objects.equal(_prefixOperator, null));
        if (_notEquals) {
          isNumeric = true;
        }
        EList<String> _operators = s.getOperators();
        boolean _notEquals_1 = (!Objects.equal(_operators, null));
        if (_notEquals_1) {
          EList<String> _operators_1 = s.getOperators();
          for (final String op : _operators_1) {
            boolean _equals = op.toLowerCase().equals("or");
            if (_equals) {
              isBoolean = true;
            } else {
              if ((!isBoolean)) {
                isNumeric = true;
              } else {
                this.insertError(s, this.INVALID_OP, ErrorType.INVALID_OPERATOR, PascalPackage.Literals.SIMPLE_EXPRESSION__OPERATORS);
                return;
              }
            }
          }
        }
        if ((isNumeric && isBoolean)) {
          this.insertError(s, this.NUM_ONLY, ErrorType.INVALID_OPERATOR, PascalPackage.Literals.SIMPLE_EXPRESSION__OPERATORS);
        } else {
          this.removeError(s, ErrorType.INVALID_OPERATOR);
          EList<EObject> _terms = s.getTerms();
          for (final EObject obj : _terms) {
            if ((obj instanceof term)) {
              term t = ((term) obj);
              if (isBoolean) {
                boolean _equals_1 = this.getType(b, t).getRealType().toLowerCase().equals(this.BOOLEAN);
                boolean _not = (!_equals_1);
                if (_not) {
                  Type _type = this.getType(b, t);
                  String _plus = (this.CANNOT_CONVERT_MESSAGE + _type);
                  String _plus_1 = (_plus + this.TO_BOOL);
                  this.insertError(s, _plus_1, ErrorType.TYPE_CONVERSION_ERROR, PascalPackage.Literals.SIMPLE_EXPRESSION__TERMS);
                } else {
                  this.removeError(s, ErrorType.TYPE_CONVERSION_ERROR);
                }
              } else {
                if (isNumeric) {
                  int _typeWeight = TypeInferer.getTypeWeight(this.getType(b, t));
                  boolean _equals_2 = (_typeWeight == (-1));
                  if (_equals_2) {
                    Type _type_1 = this.getType(b, t);
                    String _plus_2 = (this.CANNOT_CONVERT_MESSAGE + _type_1);
                    String _plus_3 = (_plus_2 + this.TO_NUM);
                    this.insertError(s, _plus_3, ErrorType.TYPE_CONVERSION_ERROR, PascalPackage.Literals.SIMPLE_EXPRESSION__TERMS);
                  } else {
                    this.removeError(s, ErrorType.TYPE_CONVERSION_ERROR);
                  }
                }
              }
              this.checkTerm(b, t);
            } else {
              if ((!isNumeric)) {
                this.insertError(s, this.NUM_ONLY, ErrorType.TYPE_CONVERSION_ERROR, PascalPackage.Literals.SIMPLE_EXPRESSION__TERMS);
              } else {
                this.removeError(s, ErrorType.TYPE_CONVERSION_ERROR);
              }
            }
          }
        }
      }
    }
  }
  
  public Boolean checkConstant(final block b, final constant const_) {
    boolean _xifexpression = false;
    String _name = const_.getName();
    boolean _notEquals = (!Objects.equal(_name, null));
    if (_notEquals) {
      boolean _xblockexpression = false;
      {
        Set<Variable> _get = this.variaveis.get(b);
        String _name_1 = const_.getName();
        Variable _variable = new Variable(_name_1);
        Variable searchVariable = PascalValidator.<Variable>search(_get, _variable);
        boolean _xifexpression_1 = false;
        boolean _equals = Objects.equal(searchVariable, null);
        if (_equals) {
          _xifexpression_1 = this.insertError(const_, this.CONST_NOT_DECL, ErrorType.NOT_DECLARATION, PascalPackage.Literals.CONSTANT__NAME);
        } else {
          boolean _xblockexpression_1 = false;
          {
            this.removeError(const_, ErrorType.NOT_DECLARATION);
            boolean _notEquals_1 = (!Objects.equal(searchVariable.type, ElementType.CONSTANT));
            if (_notEquals_1) {
              this.insertError(const_, this.CONST_ONLY, ErrorType.CONSTANT_ONLY, PascalPackage.Literals.CONSTANT__NAME);
            } else {
              this.removeError(const_, ErrorType.CONSTANT_ONLY);
            }
            boolean _xifexpression_2 = false;
            if (((!Objects.equal(const_.getOpterator(), null)) && (TypeInferer.getTypeWeight(searchVariable.getVarType()) < 0))) {
              _xifexpression_2 = this.insertError(const_, this.NAN, ErrorType.TYPE_CONVERSION_ERROR, PascalPackage.Literals.CONSTANT__NAME);
            } else {
              this.removeError(const_, ErrorType.TYPE_CONVERSION_ERROR);
            }
            _xblockexpression_1 = _xifexpression_2;
          }
          _xifexpression_1 = _xblockexpression_1;
        }
        _xblockexpression = _xifexpression_1;
      }
      _xifexpression = _xblockexpression;
    }
    return Boolean.valueOf(_xifexpression);
  }
  
  public void checkStatement(final block b, final statement stmt) {
    simple_statement _simple = stmt.getSimple();
    boolean _notEquals = (!Objects.equal(_simple, null));
    if (_notEquals) {
      simple_statement simple = stmt.getSimple();
      assignment_statement _assignment = simple.getAssignment();
      boolean _notEquals_1 = (!Objects.equal(_assignment, null));
      if (_notEquals_1) {
        boolean _checkVariable = this.checkVariable(b, simple.getAssignment().getVariable(), true);
        if (_checkVariable) {
          Type variableType = this.getType(b, simple.getAssignment().getVariable());
          Type expressionType = this.getType(b, simple.getAssignment().getExpression());
          boolean _areTypesCompatibles = TypeInferer.areTypesCompatibles(variableType, expressionType);
          boolean _not = (!_areTypesCompatibles);
          if (_not) {
            this.insertError(simple.getAssignment(), ((((this.CANNOT_CONVERT_MESSAGE + expressionType) + this.TO_MESSAGE) + variableType) + "."), ErrorType.TYPE_CONVERSION_ERROR, PascalPackage.Literals.ASSIGNMENT_STATEMENT__EXPRESSION);
          } else {
            this.removeError(simple.getAssignment(), ErrorType.TYPE_CONVERSION_ERROR);
          }
          this.checkExpression(b, simple.getAssignment().getExpression());
          Set<Variable> _get = this.variaveis.get(b);
          String _name = simple.getAssignment().getVariable().getName();
          Variable _variable = new Variable(_name);
          Variable v = PascalValidator.<Variable>search(_get, _variable);
          boolean _notEquals_2 = (!Objects.equal(v, null));
          if (_notEquals_2) {
            v.setValue(Integer.valueOf(0));
          }
        }
      } else {
        function_designator _function = simple.getFunction();
        boolean _notEquals_3 = (!Objects.equal(_function, null));
        if (_notEquals_3) {
          this.checkAbstractionCall(b, simple.getFunction(), false);
        }
      }
    } else {
      structured_statement _structured = stmt.getStructured();
      boolean _notEquals_4 = (!Objects.equal(_structured, null));
      if (_notEquals_4) {
        structured_statement structured = stmt.getStructured();
        conditional_statement _conditional = structured.getConditional();
        boolean _notEquals_5 = (!Objects.equal(_conditional, null));
        if (_notEquals_5) {
          conditional_statement conditional = structured.getConditional();
          if_statement _ifStmt = conditional.getIfStmt();
          boolean _notEquals_6 = (!Objects.equal(_ifStmt, null));
          if (_notEquals_6) {
            if_statement ifStmt = conditional.getIfStmt();
            this.checkExpression(b, ifStmt.getExpression());
            boolean _equals = this.getType(b, ifStmt.getExpression()).getRealType().toLowerCase().equals(this.BOOLEAN);
            boolean _not_1 = (!_equals);
            if (_not_1) {
              this.insertError(ifStmt, this.BOOL_ONLY, ErrorType.TYPE_CONVERSION_ERROR, PascalPackage.Literals.IF_STATEMENT__EXPRESSION);
            } else {
              this.removeError(ifStmt.getExpression(), ErrorType.TYPE_CONVERSION_ERROR);
            }
            this.checkStatement(b, ifStmt.getIfStatement());
            statement _elseStatement = ifStmt.getElseStatement();
            boolean _notEquals_7 = (!Objects.equal(_elseStatement, null));
            if (_notEquals_7) {
              this.checkStatement(b, ifStmt.getElseStatement());
            }
          }
        }
      }
    }
  }
  
  public void checkStatements(final block b, final statement_sequence sequence) {
    EList<statement> _statements = sequence.getStatements();
    for (final statement stmt : _statements) {
      this.checkStatement(b, stmt);
    }
  }
  
  public void checkBlock(final block b) {
    this.checkStatements(b, b.getStatement().getSequence());
  }
  
  public boolean insertError(final EObject object, final String message, final ErrorType type, final EStructuralFeature feature) {
    Set<org.xtext.ufcg.compiladores.validation.Error> _get = this.listaDeErrors.get(object);
    org.xtext.ufcg.compiladores.validation.Error _error = new org.xtext.ufcg.compiladores.validation.Error(message, type, feature);
    return _get.add(_error);
  }
  
  public void removeError(final EObject object, final ErrorType type) {
    Set<org.xtext.ufcg.compiladores.validation.Error> _get = this.listaDeErrors.get(object);
    org.xtext.ufcg.compiladores.validation.Error _error = new org.xtext.ufcg.compiladores.validation.Error(type);
    _get.remove(_error);
    this.showError(object);
  }
  
  @Check
  public void showError(final EObject obj) {
    boolean _containsKey = this.listaDeErrors.containsKey(obj);
    if (_containsKey) {
      Set<org.xtext.ufcg.compiladores.validation.Error> _get = this.listaDeErrors.get(obj);
      for (final org.xtext.ufcg.compiladores.validation.Error err : _get) {
        this.error(err.getMessage(), obj, err.getFeature(), (-1));
      }
    }
  }
}
